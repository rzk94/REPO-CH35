import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;
import java.lang.reflect.*;
import static java.lang.System.in;

class Prime{//Nombre de la clase esta dado por el codigo de abajo
    public void checkPrime(int... num){ //metodo para verificar que el numero es primo
        for(int i=0;i<num.length;i++){// Recorre cada elemento de num
            
            if(num[i]<2){ // Si el numero es menor que 2, no es primo y no se imprime nada
            }else if(num[i]==2){ // Si el numero es 2, se imprime
                System.out.print(num[i]+" ");
            }else{ // Si el numero es mayor que 2, se verifica 
                boolean esPrime=true; //inicializa variable para terminar cierto o falso que es primo
                for(int j=2; j<num[i];j++){
                    // Comprueba si el numero es divisible por algun otro numero menor que si mismo
                    if(num[i]%j==0){// Si es divisible, no es primo y se rompe el bucle
                        esPrime=false;
                        break;
                    }
                }
                if(esPrime==true){//si esprime es cierto, num es primo y se muestra en consola
                    System.out.print(num[i]+" ");
                }
            }
        }
        System.out.println();//imprime linea nueva
    }
}

//Solution es la clase dada por Hacker Rank
public class Solution {

	public static void main(String[] args) {
		try{
		BufferedReader br=new BufferedReader(new InputStreamReader(in));
		int n1=Integer.parseInt(br.readLine());
		int n2=Integer.parseInt(br.readLine());
		int n3=Integer.parseInt(br.readLine());
		int n4=Integer.parseInt(br.readLine());
		int n5=Integer.parseInt(br.readLine());
		Prime ob=new Prime();
		ob.checkPrime(n1);
		ob.checkPrime(n1,n2);
		ob.checkPrime(n1,n2,n3);
		ob.checkPrime(n1,n2,n3,n4,n5);	
		Method[] methods=Prime.class.getDeclaredMethods();
		Set<String> set=new HashSet<>();
		boolean overload=false;
		for(int i=0;i<methods.length;i++)
		{
			if(set.contains(methods[i].getName()))
			{
				overload=true;
				break;
			}
			set.add(methods[i].getName());
			
		}
		if(overload)
		{
			throw new Exception("Overloading not allowed");
		}
		}
		catch(Exception e)
		{
			System.out.println(e);
		}
	}
	
}
